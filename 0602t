RPM MTB Activities
    |
    |--- Maintain the Bank (MTB) Activities for RPM
        |
        |--- Strategic Initiatives
        |       |
        |       |--- Double Release
        |       |--- Incident Management
        |       |--- TPAM Reduction
        |       |--- ICE (IT Control)
        |       |--- EEI
        |
        |--- Pipeline Excellence
        |       |
        |       |--- DMOV
        |       |--- Regular Server Patching (0.2 FTE/year)
        |       |--- Address System Vulnerabilities (0.2 FTE/year)
        |       |--- IT Compliance / IT Control (0.2 FTE/year)
        |       |--- Maintain Citrix Servers Maintenance
        |       |--- SSP
        |       |--- ITSOWOB
        |
        |--- Daily Work Items
        |       |
        |       |--- Production Support for Monthly/Daily Batch (Around 2 FTE)
        |       |--- Production Bug Fixing & Enhancement
        |       |--- CI/CD Pipeline Maintenance (0.1 FTE/year)
        |
        |--- DevOps / Automation
        |       |
        |       |--- Auto Regression Test
        |       |--- Streamline Email Notification Approach
        |       |--- Code Version Control Discussion
        |       |--- UAT Storage Management
        |
        |--- Others
                |
                |--- Pod Based Learning
                |--- FinExcellent People
                |--- Reporting / Successful Story
				
RPM MTB Activities Overview
1. Strategic Initiatives
Double Release
Incident Management
TPAM Reduction
ICE (IT Control)
EEI (Link to EEI)
2. Pipeline Excellence
DMOV
Regular Server Patching (0.2 FTE per year) - Label: patch
Address System Vulnerabilities (0.2 FTE per year) - Label: vulnerability
IT Compliance / IT Control (0.2 FTE per year) - Label: it_control
Maintain Citrix Servers Maintenance
SSP
ITSOBOW
3. Daily Work Items
Production Support for Monthly/Daily Batch (Around 2 FTE)
Production Bug Fixing & Enhancement - Label: rpm_bug_fixing
CI/CD Pipeline Maintenance (0.1 FTE per year) - Label: rpm_devops
4. DevOps / Automation
Auto Regression Test
Streamline Email Notification Approach
Code Version Control Discussion (How to ensure GitHub version is the same with prod)
UAT Storage Management
5. Other Activities
Pod Based Learning
FinExcellent People
Reporting / Successful Story
Summary
The MTB group is responsible for a variety of activities that span strategic initiatives, pipeline excellence, daily operational tasks, DevOps and automation efforts, as well as other miscellaneous but important activities. Each category has specific tasks and goals, some of which are quantified in terms of Full-Time Equivalent (FTE) hours per year. This structured overview should help team members and stakeholders quickly understand the scope and focus areas of the MTB group's responsibilities.				